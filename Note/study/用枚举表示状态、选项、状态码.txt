第5条：用枚举表示状态、选项、状态码（1）

由于Objective-C基于C语言，所以C语言有的功能它都有。其中之一就是枚举类型：enum。系统框架中频繁用到此类型，然而开发者容易忽视它。在以一系列常量来表示错误状态码或可组合的选项时，极宜使用枚举为其命名。由于C++11标准扩充了枚举的特性，所以最新版系统框架使用了“强类型”（strong type）的枚举。没错，Objective-C也能得益于C++11标准。

枚举只是一种常量命名方式。某个对象所经历的各种状态就可以定义为一个简单的枚举集（enumeration set）。比如说，可以用下列枚举表示“套接字连接”（socket connection）的状态：
 

enum EOCConnectionState {  
    EOCConnectionStateDisconnected,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
}; 
由于每种状态都用一个便于理解的值来表示，所以这样写出来的代码更易读懂。编译器会为枚举分配一个独有的编号，从0开始，每个枚举递增1。实现枚举所用的数据类型取决于编译器，不过其二进制位（bit）的个数必须能完全表示下枚举编号才行。在前例中，由于最大编号是2，所以使用1个字节的char类型即可。

然而定义枚举变量的方式却不太简洁，要依如下语法编写：
 

enum EOCConnectionState state = EOCConnectionStateDisconnected; 
若是每次不用敲入enum而只需写EOCConnectionState就好了。要想这样做，则需使用typedef关键字重新定义枚举类型：
 

enum EOCConnectionState {  
    EOCConnectionStateDisconnected,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
};  
typedef enum EOCConnectionState EOCConnectionState; 
现在可以用简写的EOCConnectionState来代替完整的enum EOCConnectionState了：
 

EOCConnectionState state = EOCConnectionStateDisconnected; 
C++11标准修订了枚举的某些特性。其中一项改动是：可以指明用何种“底层数据类型”（underlying type）来保存枚举类型的变量。这样做的好处是，可以向前声明枚举变量了。若不指定底层数据类型，则无法向前声明枚举类型，因为编译器不清楚底层数据类型的大小，所以在用到此枚举类型时，也就不知道究竟该给变量分配多少空间。

指定底层数据类型所用的语法是：
 

enum EOCConnectionStateConnectionState : NSInteger { /* ... */ }; 
上面这行代码确保枚举的底层数据类型是NSInteger。也可以在向前声明时指定底层数据类型：
 

enum EOCConnectionStateConnectionState : NSInteger; 
还可以不使用编译器所分配的序号，而是手工指定某个枚举成员所对应的值。语法如下：
 

enum EOCConnectionStateConnectionState {  
    EOCConnectionStateDisconnected = 1,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
}; 
上述代码把EOCConnectionStateDisconnected的值设为1，而不使用编译器所分配的0。如前所述，接下来几个枚举的值都会在上一个的基础上递增1。比如说，EOCConnectionState-Connected的值就是3。

还有一种情况应该使用枚举类型，那就是定义选项的时候。若这些选项可以彼此组合，则更应如此。只要枚举定义得对，各选项之间就可通过“按位或操作符”（bitwise OR operator）来组合。例如，iOS UI框架中有如下枚举类型，用来表示某个视图应该如何在水平或垂直方向上调整大小：
 

enum UIViewAutoresizing {  
    UIViewAutoresizingNone                 = 0,  
    UIViewAutoresizingFlexibleLeftMargin   = 1 << 0,  
    UIViewAutoresizingFlexibleWidth        = 1 << 1,  
    UIViewAutoresizingFlexibleRightMargin  = 1 << 2,  
    UIViewAutoresizingFlexibleTopMargin    = 1 << 3,  
    UIViewAutoresizingFlexibleHeight       = 1 << 4,  
    UIViewAutoresizingFlexibleBottomMargin = 1 << 5,  
} 
每个选项均可启用或禁用，使用上述方式来定义枚举值即可保证这一点，因为在每个枚举值所对应的二进制表示中，只有1个二进制位的值是1。用“按位或操作符”可组合多个选项，例如：UIViewAutoResizingFlexibleWidth| UIViewAutoresizingFlexibleHeight。图1-2列出了每个枚举成员的二进制值，并演示了刚才那两个枚举组合之后的值。用“按位与操作符”（bitwise AND operator）即可判断出是否已启用某个选项：
 

enum UIViewAutoresizing resizing =  
    UIViewAutoresizingFlexibleWidth |  
    UIViewAutoresizingFlexibleHeight;  
if (resizing & UIViewAutoresizingFlexibleWidth) {  
       // UIViewAutoresizingFlexibleWidth is set  
} 
第5条：用枚举表示状态、选项、状态码（2）

系统库中频繁使用这个办法。iOS UI框架中的UIKit里还有个例子，用枚举值告诉系统视图所支持的设备显示方向。这个枚举类型叫做UIInterfaceOrientationMask，开发者需要实现一个名为supportedInterfaceOrientations的方法，将视图所支持的显示方向告诉系统：
 

- (NSUInteger)supportedInterfaceOrientations {  
  return UIInterfaceOrientationMaskPortrait |  
           UIInterfaceOrientationMaskLandscapeLeft;  
} 
Foundation框架中定义了一些辅助的宏，用这些宏来定义枚举类型时，也可以指定用于保存枚举值的底层数据类型。这些宏具备向后兼容（backward compatibility）能力，如果目标平台的编译器支持新标准，那就使用新式语法，否则改用旧式语法。这些宏是用#define预处理指令来定义的，其中一个用于定义像EOCConnectionState这种普通的枚举类型，另一个用于定义像UIViewAutoresizing这种包含一系列选项的枚举类型，其用法如下：
 

typedef NS_ENUM(NSUInteger, EOCConnectionState) {  
    EOCConnectionStateDisconnected,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
};  
typedef NS_OPTIONS(NSUInteger, EOCPermittedDirection) {  
    EOCPermittedDirectionUp    = 1 << 0,  
    EOCPermittedDirectionDown  = 1 << 1,  
    EOCPermittedDirectionLeft  = 1 << 2,  
    EOCPermittedDirectionRight = 1 << 3,  
}; 
这些宏的定义如下：
 

#if (__cplusplus && __cplusplus >= 201103L&&  
        (__has_extension(cxx_strong_enums) ||  
         __has_feature(objc_fixed_enum))  
    ) ||  
    (!__cplusplus && __has_feature(objc_fixed_enum))  
    #define NS_ENUM(_type, _name)  
           enum _name : _type _name; enum _name : _type  
    #if (__cplusplus)  
        #define NS_OPTIONS(_type, _name)  
               type _name; enum : _type  
    #else  
        #define NS_OPTIONS(_type, _name)  
               enum _name : _type _name; enum _name : _type  
    #endif  
#else  
    #define NS_ENUM(_type, _name) _type _name; enum  
    #define NS_OPTIONS(_type, _name) _type _name; enum  
#endif 
由于需要分别处理不同情况，所以上述代码用多种方式来定义这两个宏。第一个#if用于判断编译器是否支持新式枚举。其中所用的布尔逻辑看上去相当复杂，不过其意思就是想判断编译器是否支持新的枚举特性。如果不支持，那么就用老式语法来定义枚举。

如果支持新特性，那么用NS_ENUM宏所定义的枚举类型展开之后就是：
 

typedef enum EOCConnectionState : NSUInteger EOCConnectionState;  
enum EOCConnectionState : NSUInteger {  
    EOCConnectionStateDisconnected,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
}; 
根据是否要将代码按C++模式编译，NS_OPTIONS宏的定义方式也有所不同。如果不按C++编译，那么其展开方式就和NS_ENUM相同。若按C++编译，则展开后的代码略有不同。原因在于，用按位或运算来操作两个枚举值时，C++编译模式的处理办法与非C++模式不一样。而上面已经提到了，作为选项的枚举值经常需要用按位或运算来组合。在用或运算操作两个枚举值时，C++认为运算结果的数据类型应该是枚举的底层数据类型，也就是NSUInteger。而且C++不允许将这个底层类型“隐式转换”（implicit cast）为枚举类型本身。我们用EOCPermittedDirection来演示一下，假设按NS_ENUM方式将其展开：
 

typedef enum EOCPermittedDirection : int EOCPermittedDirection;  
enum EOCPermittedDirection : int {  
    EOCPermittedDirectionUp    = 1 << 0,  
    EOCPermittedDirectionDown  = 1 << 1,  
    EOCPermittedDirectionLeft  = 1 << 2,  
    EOCPermittedDirectionRight = 1 << 3,  
}; 
然后考虑下列代码：
 

EOCPermittedDirection permittedDirections =  
    EOCPermittedDirectionLeft | EOCPermittedDirectionUp; 
若编译器按C++模式编译（也可能是按Objective-C++模式编译），则会给出下列错误信息：
 

error: cannot initialize a variable of type  
'EOCPermittedDirection' with an rvalue of type 'int' 
如果想编译这行代码，就要将按位或操作的结果显式转换（explicit cast）为EOCPermittedDirection。所以，在C++模式下应该用另一种方式定义NS_OPTIONS宏，以便省去类型转换操作。鉴于此，凡是需要以按位或操作来组合的枚举都应使用NS_OPTIONS定义。若是枚举不需要互相组合，则应使用NS_ENUM来定义。

能够用到枚举的情况还有很多。前面已经提到，枚举可以表示选项与状态，然而还有许多东西也能用枚举来表示。比如状态码就是个好例子。可以把逻辑含义相似的一组状态码放入同一个枚举集里，而不要用#define预处理指令或常量来定义。以枚举来表示样式（style）也很合宜。假如创建某个UI元素时可以使用不同的样式，那么在这种情况下就最应该把样式声明为枚举类型了。

最后再讲一种枚举的用法，就是在switch语句里。有时可以这样定义：
 

typedef NS_ENUM(NSUInteger, EOCConnectionState) {  
    EOCConnectionStateDisconnected,  
    EOCConnectionStateConnecting,  
    EOCConnectionStateConnected,  
};  
 
switch (_currentState) {  
    EOCConnectionStateDisconnected:  
        // Handle disconnected state  
        break;  
    EOCConnectionStateConnecting:  
        // Handle connecting state  
        break;  
    EOCConnectionStateConnected:  
        // Handle connected state  
        break;  
} 
我们总习惯在switch语句中加上default分支。然而，若是用枚举来定义状态机（state machine），则最好不要有default分支。这样的话，如果稍后又加了一种状态，那么编译器就会发出警告信息，提示新加入的状态并未在switch分支中处理。假如写上了default分支，那么它就会处理这个新状态，从而导致编译器不发警告信息。用NS_ENUM定义其他枚举类型时也要注意此问题。例如，在定义代表UI元素样式的枚举时，通常要确保switch语句能正确处理所有样式。

要点

应该用枚举来表示状态机的状态、传递给方法的选项以及状态码等值，给这些值起个易懂的名字。

如果把传递给某个方法的选项表示为枚举类型，而多个选项又可同时使用，那么就将各选项值定义为2的幂，以便通过按位或操作将其组合起来。

用NS_ENUM与NS_OPTIONS宏来定义枚举类型，并指明其底层数据类型。这样做可以确保枚举是用开发者所选的底层数据类型实现出来的，而不会采用编译器所选的类型。

在处理枚举类型的switch语句中不要实现default分支。这样的话，加入新枚举之后，编译器就会提示开发者：switch语句并未处理所有枚举。

